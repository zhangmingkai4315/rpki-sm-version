// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cfrpki.proto

package cfrpki

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RRDPInfoQuery struct {
	RRDP                 string   `protobuf:"bytes,1,opt,name=RRDP,proto3" json:"RRDP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RRDPInfoQuery) Reset()         { *m = RRDPInfoQuery{} }
func (m *RRDPInfoQuery) String() string { return proto.CompactTextString(m) }
func (*RRDPInfoQuery) ProtoMessage()    {}
func (*RRDPInfoQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b755a2b9c60ee6c, []int{0}
}

func (m *RRDPInfoQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RRDPInfoQuery.Unmarshal(m, b)
}
func (m *RRDPInfoQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RRDPInfoQuery.Marshal(b, m, deterministic)
}
func (m *RRDPInfoQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RRDPInfoQuery.Merge(m, src)
}
func (m *RRDPInfoQuery) XXX_Size() int {
	return xxx_messageInfo_RRDPInfoQuery.Size(m)
}
func (m *RRDPInfoQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RRDPInfoQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RRDPInfoQuery proto.InternalMessageInfo

func (m *RRDPInfoQuery) GetRRDP() string {
	if m != nil {
		return m.RRDP
	}
	return ""
}

type RRDPInfo struct {
	RRDP                 string   `protobuf:"bytes,1,opt,name=RRDP,proto3" json:"RRDP,omitempty"`
	SessionID            string   `protobuf:"bytes,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	Serial               int64    `protobuf:"varint,3,opt,name=Serial,proto3" json:"Serial,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RRDPInfo) Reset()         { *m = RRDPInfo{} }
func (m *RRDPInfo) String() string { return proto.CompactTextString(m) }
func (*RRDPInfo) ProtoMessage()    {}
func (*RRDPInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b755a2b9c60ee6c, []int{1}
}

func (m *RRDPInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RRDPInfo.Unmarshal(m, b)
}
func (m *RRDPInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RRDPInfo.Marshal(b, m, deterministic)
}
func (m *RRDPInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RRDPInfo.Merge(m, src)
}
func (m *RRDPInfo) XXX_Size() int {
	return xxx_messageInfo_RRDPInfo.Size(m)
}
func (m *RRDPInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RRDPInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RRDPInfo proto.InternalMessageInfo

func (m *RRDPInfo) GetRRDP() string {
	if m != nil {
		return m.RRDP
	}
	return ""
}

func (m *RRDPInfo) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *RRDPInfo) GetSerial() int64 {
	if m != nil {
		return m.Serial
	}
	return 0
}

type ResourceQuery struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	RRDP                 string   `protobuf:"bytes,2,opt,name=RRDP,proto3" json:"RRDP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceQuery) Reset()         { *m = ResourceQuery{} }
func (m *ResourceQuery) String() string { return proto.CompactTextString(m) }
func (*ResourceQuery) ProtoMessage()    {}
func (*ResourceQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b755a2b9c60ee6c, []int{2}
}

func (m *ResourceQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceQuery.Unmarshal(m, b)
}
func (m *ResourceQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceQuery.Marshal(b, m, deterministic)
}
func (m *ResourceQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceQuery.Merge(m, src)
}
func (m *ResourceQuery) XXX_Size() int {
	return xxx_messageInfo_ResourceQuery.Size(m)
}
func (m *ResourceQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceQuery proto.InternalMessageInfo

func (m *ResourceQuery) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ResourceQuery) GetRRDP() string {
	if m != nil {
		return m.RRDP
	}
	return ""
}

type ResourceData struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResourceData) Reset()         { *m = ResourceData{} }
func (m *ResourceData) String() string { return proto.CompactTextString(m) }
func (*ResourceData) ProtoMessage()    {}
func (*ResourceData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b755a2b9c60ee6c, []int{3}
}

func (m *ResourceData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceData.Unmarshal(m, b)
}
func (m *ResourceData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceData.Marshal(b, m, deterministic)
}
func (m *ResourceData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceData.Merge(m, src)
}
func (m *ResourceData) XXX_Size() int {
	return xxx_messageInfo_ResourceData.Size(m)
}
func (m *ResourceData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceData.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceData proto.InternalMessageInfo

func (m *ResourceData) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ResourceData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FetchQuery struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchQuery) Reset()         { *m = FetchQuery{} }
func (m *FetchQuery) String() string { return proto.CompactTextString(m) }
func (*FetchQuery) ProtoMessage()    {}
func (*FetchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b755a2b9c60ee6c, []int{4}
}

func (m *FetchQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchQuery.Unmarshal(m, b)
}
func (m *FetchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchQuery.Marshal(b, m, deterministic)
}
func (m *FetchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchQuery.Merge(m, src)
}
func (m *FetchQuery) XXX_Size() int {
	return xxx_messageInfo_FetchQuery.Size(m)
}
func (m *FetchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FetchQuery proto.InternalMessageInfo

func (m *FetchQuery) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SIA struct {
	RSYNC                string   `protobuf:"bytes,1,opt,name=RSYNC,proto3" json:"RSYNC,omitempty"`
	RRDP                 string   `protobuf:"bytes,2,opt,name=RRDP,proto3" json:"RRDP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SIA) Reset()         { *m = SIA{} }
func (m *SIA) String() string { return proto.CompactTextString(m) }
func (*SIA) ProtoMessage()    {}
func (*SIA) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b755a2b9c60ee6c, []int{5}
}

func (m *SIA) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SIA.Unmarshal(m, b)
}
func (m *SIA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SIA.Marshal(b, m, deterministic)
}
func (m *SIA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SIA.Merge(m, src)
}
func (m *SIA) XXX_Size() int {
	return xxx_messageInfo_SIA.Size(m)
}
func (m *SIA) XXX_DiscardUnknown() {
	xxx_messageInfo_SIA.DiscardUnknown(m)
}

var xxx_messageInfo_SIA proto.InternalMessageInfo

func (m *SIA) GetRSYNC() string {
	if m != nil {
		return m.RSYNC
	}
	return ""
}

func (m *SIA) GetRRDP() string {
	if m != nil {
		return m.RRDP
	}
	return ""
}

type OperationResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OperationResponse) Reset()         { *m = OperationResponse{} }
func (m *OperationResponse) String() string { return proto.CompactTextString(m) }
func (*OperationResponse) ProtoMessage()    {}
func (*OperationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b755a2b9c60ee6c, []int{6}
}

func (m *OperationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OperationResponse.Unmarshal(m, b)
}
func (m *OperationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OperationResponse.Marshal(b, m, deterministic)
}
func (m *OperationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationResponse.Merge(m, src)
}
func (m *OperationResponse) XXX_Size() int {
	return xxx_messageInfo_OperationResponse.Size(m)
}
func (m *OperationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RRDPInfoQuery)(nil), "RRDPInfoQuery")
	proto.RegisterType((*RRDPInfo)(nil), "RRDPInfo")
	proto.RegisterType((*ResourceQuery)(nil), "ResourceQuery")
	proto.RegisterType((*ResourceData)(nil), "ResourceData")
	proto.RegisterType((*FetchQuery)(nil), "FetchQuery")
	proto.RegisterType((*SIA)(nil), "SIA")
	proto.RegisterType((*OperationResponse)(nil), "OperationResponse")
}

func init() { proto.RegisterFile("cfrpki.proto", fileDescriptor_0b755a2b9c60ee6c) }

var fileDescriptor_0b755a2b9c60ee6c = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x4b, 0xfb, 0x40,
	0x10, 0xc6, 0x9b, 0xa6, 0xff, 0xbe, 0x4c, 0x93, 0xc2, 0x7f, 0x15, 0x29, 0xc1, 0x43, 0x5d, 0x29,
	0x14, 0x85, 0x55, 0x2b, 0xe8, 0xb9, 0x18, 0x5a, 0x82, 0xa0, 0x71, 0xe3, 0xc5, 0x63, 0x5a, 0xa6,
	0x34, 0x18, 0xb2, 0x21, 0xbb, 0x3d, 0xf4, 0xcb, 0xf8, 0x59, 0x25, 0xdb, 0xa6, 0x2f, 0xd8, 0xa0,
	0xb7, 0xd9, 0x9d, 0xdf, 0x93, 0x67, 0x9e, 0xcd, 0x80, 0x35, 0x9b, 0x67, 0xe9, 0x67, 0xc4, 0xd2,
	0x4c, 0x28, 0x41, 0x2f, 0xc1, 0xe6, 0xdc, 0xf5, 0xbd, 0x64, 0x2e, 0xde, 0x96, 0x98, 0xad, 0x08,
	0x81, 0x5a, 0x7e, 0xd1, 0x35, 0x7a, 0xc6, 0xa0, 0xc5, 0x75, 0x4d, 0xdf, 0xa1, 0x59, 0x40, 0xc7,
	0xfa, 0xe4, 0x1c, 0x5a, 0x01, 0x4a, 0x19, 0x89, 0xc4, 0x73, 0xbb, 0x55, 0xdd, 0xd8, 0x5d, 0x90,
	0x33, 0xa8, 0x07, 0x98, 0x45, 0x61, 0xdc, 0x35, 0x7b, 0xc6, 0xc0, 0xe4, 0x9b, 0x13, 0x7d, 0x04,
	0x9b, 0xa3, 0x14, 0xcb, 0x6c, 0x86, 0x5b, 0x6b, 0x3f, 0x54, 0x8b, 0xe2, 0xd3, 0x79, 0xbd, 0xb5,
	0xab, 0xee, 0x8d, 0xf3, 0x00, 0x56, 0x21, 0x74, 0x43, 0x15, 0x96, 0xe9, 0xf2, 0x9e, 0xd6, 0x59,
	0x5c, 0xd7, 0xb4, 0x07, 0x30, 0x46, 0x35, 0x5b, 0x94, 0xba, 0xd1, 0x1b, 0x30, 0x03, 0x6f, 0x44,
	0x4e, 0xe1, 0x1f, 0x0f, 0x3e, 0x5e, 0x9e, 0x36, 0xbd, 0xf5, 0xe1, 0xe8, 0x28, 0x27, 0xf0, 0xff,
	0x35, 0xc5, 0x2c, 0x54, 0x91, 0x48, 0x38, 0xca, 0x54, 0x24, 0x12, 0x87, 0x5f, 0x26, 0x34, 0xb8,
	0xff, 0xec, 0x8d, 0x7c, 0x8f, 0x30, 0x68, 0x4f, 0x50, 0x15, 0xe3, 0x92, 0x0e, 0x3b, 0x88, 0xec,
	0xd8, 0x6c, 0x3f, 0x09, 0xad, 0x90, 0x21, 0xd8, 0x9a, 0x4f, 0x85, 0x8c, 0x94, 0xc8, 0x56, 0xbf,
	0x2a, 0x6e, 0x0d, 0xd2, 0x07, 0x6b, 0x82, 0x4a, 0x47, 0xd3, 0xbf, 0xa3, 0xcd, 0x76, 0x31, 0x9d,
	0x1a, 0x0b, 0xbc, 0x91, 0xc6, 0x2e, 0xa0, 0x59, 0x60, 0x65, 0xc8, 0x10, 0xda, 0xfe, 0x72, 0x1a,
	0x47, 0x72, 0x31, 0x8e, 0x62, 0x24, 0x87, 0x5e, 0x0e, 0x61, 0x3f, 0xb2, 0xd2, 0x0a, 0xb9, 0x03,
	0x70, 0x31, 0x46, 0x85, 0x7f, 0x97, 0xf4, 0xa1, 0xe1, 0x0b, 0xa9, 0xf2, 0xa7, 0xd6, 0xde, 0x25,
	0xd8, 0x35, 0x34, 0x73, 0x4c, 0x67, 0x6a, 0xb1, 0x62, 0x03, 0x4b, 0xe0, 0xab, 0xf5, 0x43, 0x17,
	0x6b, 0xda, 0x61, 0x07, 0x6b, 0xed, 0xec, 0xf4, 0xb4, 0x32, 0xad, 0xeb, 0xdd, 0xbf, 0xff, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x80, 0x24, 0x14, 0x0b, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPKIAPIClient is the client API for RPKIAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPKIAPIClient interface {
	GetResource(ctx context.Context, in *ResourceQuery, opts ...grpc.CallOption) (*ResourceData, error)
	GetRepository(ctx context.Context, in *ResourceQuery, opts ...grpc.CallOption) (RPKIAPI_GetRepositoryClient, error)
	GetFetchRRDP(ctx context.Context, in *FetchQuery, opts ...grpc.CallOption) (RPKIAPI_GetFetchRRDPClient, error)
	GetFetch(ctx context.Context, in *FetchQuery, opts ...grpc.CallOption) (RPKIAPI_GetFetchClient, error)
	PublishFile(ctx context.Context, in *ResourceData, opts ...grpc.CallOption) (*OperationResponse, error)
	DeleteFile(ctx context.Context, in *ResourceData, opts ...grpc.CallOption) (*OperationResponse, error)
	PostSIA(ctx context.Context, in *SIA, opts ...grpc.CallOption) (*OperationResponse, error)
	PostRRDP(ctx context.Context, in *RRDPInfo, opts ...grpc.CallOption) (*OperationResponse, error)
	GetRRDPInfo(ctx context.Context, in *RRDPInfoQuery, opts ...grpc.CallOption) (*RRDPInfo, error)
}

type rPKIAPIClient struct {
	cc *grpc.ClientConn
}

func NewRPKIAPIClient(cc *grpc.ClientConn) RPKIAPIClient {
	return &rPKIAPIClient{cc}
}

func (c *rPKIAPIClient) GetResource(ctx context.Context, in *ResourceQuery, opts ...grpc.CallOption) (*ResourceData, error) {
	out := new(ResourceData)
	err := c.cc.Invoke(ctx, "/RPKIAPI/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPKIAPIClient) GetRepository(ctx context.Context, in *ResourceQuery, opts ...grpc.CallOption) (RPKIAPI_GetRepositoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPKIAPI_serviceDesc.Streams[0], "/RPKIAPI/GetRepository", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPKIAPIGetRepositoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPKIAPI_GetRepositoryClient interface {
	Recv() (*ResourceData, error)
	grpc.ClientStream
}

type rPKIAPIGetRepositoryClient struct {
	grpc.ClientStream
}

func (x *rPKIAPIGetRepositoryClient) Recv() (*ResourceData, error) {
	m := new(ResourceData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPKIAPIClient) GetFetchRRDP(ctx context.Context, in *FetchQuery, opts ...grpc.CallOption) (RPKIAPI_GetFetchRRDPClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPKIAPI_serviceDesc.Streams[1], "/RPKIAPI/GetFetchRRDP", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPKIAPIGetFetchRRDPClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPKIAPI_GetFetchRRDPClient interface {
	Recv() (*SIA, error)
	grpc.ClientStream
}

type rPKIAPIGetFetchRRDPClient struct {
	grpc.ClientStream
}

func (x *rPKIAPIGetFetchRRDPClient) Recv() (*SIA, error) {
	m := new(SIA)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPKIAPIClient) GetFetch(ctx context.Context, in *FetchQuery, opts ...grpc.CallOption) (RPKIAPI_GetFetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPKIAPI_serviceDesc.Streams[2], "/RPKIAPI/GetFetch", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPKIAPIGetFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPKIAPI_GetFetchClient interface {
	Recv() (*SIA, error)
	grpc.ClientStream
}

type rPKIAPIGetFetchClient struct {
	grpc.ClientStream
}

func (x *rPKIAPIGetFetchClient) Recv() (*SIA, error) {
	m := new(SIA)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPKIAPIClient) PublishFile(ctx context.Context, in *ResourceData, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/RPKIAPI/PublishFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPKIAPIClient) DeleteFile(ctx context.Context, in *ResourceData, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/RPKIAPI/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPKIAPIClient) PostSIA(ctx context.Context, in *SIA, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/RPKIAPI/PostSIA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPKIAPIClient) PostRRDP(ctx context.Context, in *RRDPInfo, opts ...grpc.CallOption) (*OperationResponse, error) {
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, "/RPKIAPI/PostRRDP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPKIAPIClient) GetRRDPInfo(ctx context.Context, in *RRDPInfoQuery, opts ...grpc.CallOption) (*RRDPInfo, error) {
	out := new(RRDPInfo)
	err := c.cc.Invoke(ctx, "/RPKIAPI/GetRRDPInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPKIAPIServer is the server API for RPKIAPI service.
type RPKIAPIServer interface {
	GetResource(context.Context, *ResourceQuery) (*ResourceData, error)
	GetRepository(*ResourceQuery, RPKIAPI_GetRepositoryServer) error
	GetFetchRRDP(*FetchQuery, RPKIAPI_GetFetchRRDPServer) error
	GetFetch(*FetchQuery, RPKIAPI_GetFetchServer) error
	PublishFile(context.Context, *ResourceData) (*OperationResponse, error)
	DeleteFile(context.Context, *ResourceData) (*OperationResponse, error)
	PostSIA(context.Context, *SIA) (*OperationResponse, error)
	PostRRDP(context.Context, *RRDPInfo) (*OperationResponse, error)
	GetRRDPInfo(context.Context, *RRDPInfoQuery) (*RRDPInfo, error)
}

func RegisterRPKIAPIServer(s *grpc.Server, srv RPKIAPIServer) {
	s.RegisterService(&_RPKIAPI_serviceDesc, srv)
}

func _RPKIAPI_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPKIAPIServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPKIAPI/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPKIAPIServer).GetResource(ctx, req.(*ResourceQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPKIAPI_GetRepository_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResourceQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPKIAPIServer).GetRepository(m, &rPKIAPIGetRepositoryServer{stream})
}

type RPKIAPI_GetRepositoryServer interface {
	Send(*ResourceData) error
	grpc.ServerStream
}

type rPKIAPIGetRepositoryServer struct {
	grpc.ServerStream
}

func (x *rPKIAPIGetRepositoryServer) Send(m *ResourceData) error {
	return x.ServerStream.SendMsg(m)
}

func _RPKIAPI_GetFetchRRDP_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPKIAPIServer).GetFetchRRDP(m, &rPKIAPIGetFetchRRDPServer{stream})
}

type RPKIAPI_GetFetchRRDPServer interface {
	Send(*SIA) error
	grpc.ServerStream
}

type rPKIAPIGetFetchRRDPServer struct {
	grpc.ServerStream
}

func (x *rPKIAPIGetFetchRRDPServer) Send(m *SIA) error {
	return x.ServerStream.SendMsg(m)
}

func _RPKIAPI_GetFetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPKIAPIServer).GetFetch(m, &rPKIAPIGetFetchServer{stream})
}

type RPKIAPI_GetFetchServer interface {
	Send(*SIA) error
	grpc.ServerStream
}

type rPKIAPIGetFetchServer struct {
	grpc.ServerStream
}

func (x *rPKIAPIGetFetchServer) Send(m *SIA) error {
	return x.ServerStream.SendMsg(m)
}

func _RPKIAPI_PublishFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPKIAPIServer).PublishFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPKIAPI/PublishFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPKIAPIServer).PublishFile(ctx, req.(*ResourceData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPKIAPI_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPKIAPIServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPKIAPI/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPKIAPIServer).DeleteFile(ctx, req.(*ResourceData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPKIAPI_PostSIA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SIA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPKIAPIServer).PostSIA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPKIAPI/PostSIA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPKIAPIServer).PostSIA(ctx, req.(*SIA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPKIAPI_PostRRDP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RRDPInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPKIAPIServer).PostRRDP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPKIAPI/PostRRDP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPKIAPIServer).PostRRDP(ctx, req.(*RRDPInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPKIAPI_GetRRDPInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RRDPInfoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPKIAPIServer).GetRRDPInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPKIAPI/GetRRDPInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPKIAPIServer).GetRRDPInfo(ctx, req.(*RRDPInfoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPKIAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPKIAPI",
	HandlerType: (*RPKIAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResource",
			Handler:    _RPKIAPI_GetResource_Handler,
		},
		{
			MethodName: "PublishFile",
			Handler:    _RPKIAPI_PublishFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _RPKIAPI_DeleteFile_Handler,
		},
		{
			MethodName: "PostSIA",
			Handler:    _RPKIAPI_PostSIA_Handler,
		},
		{
			MethodName: "PostRRDP",
			Handler:    _RPKIAPI_PostRRDP_Handler,
		},
		{
			MethodName: "GetRRDPInfo",
			Handler:    _RPKIAPI_GetRRDPInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRepository",
			Handler:       _RPKIAPI_GetRepository_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFetchRRDP",
			Handler:       _RPKIAPI_GetFetchRRDP_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFetch",
			Handler:       _RPKIAPI_GetFetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cfrpki.proto",
}
